class Solution {
    public void nextPermutation(int[] nums) {
        /*
            LOGIC
        1. How permutation works ? 
        - 1 2 3
        so start from right to left and take first last two numbers i.e 2 and 3
        so permuatation of 2 and 3 will be either 2 3 or 3 2. 
        2 3 comes first then 3 2
        So in this case it is 2 3 which means our next permutation will be 1 3 2

        2. What will be next permutation for 1 3 2? 
        - Take last two numbers 3 2 so it will be either 3 2 or 2 3
        But it is 3 2 so it won't be 2 3
        Then take last three element 1 3 2
        So what will be the permutation for 1 3 2
                        1 2 3 
                        |
                        |
                        |
                        1 3 2
                        |
                        |
                        |
                        3 2 1
        So in this case assume 1 as k and see from right is there any element which is greater than 1. 
        If yes then just swap it with K and reverse from k+1 till n-1. 
        e.g in our case k = 1
        and if we see from right it is 2 which is greater than k 
        so our permutation will be 2 3 1. But it is not our next permutation. 
        Instead it will be 2 1 3. That is why we reverse element from k+1 till n-1


        WORST CASE OF PROBLEM
        What if K is -1? 
        - If k is -1. Then just reverse whole array that would be next permutation.
        e.g 3 2 1
        k is 3 and if we see from right there isn't any element which is greater than 3. So k will be -1. And in that case just reverse whole array. 
        Next permutation will be 1 2 3. 
         */

        int n = nums.length;
        int k = n-2;    // k is considered second last element because we observe to the right of k. and see whether it is exhausted or not. 

        // if array is null
        if(nums == null || n==0)return ;

        //find k 
        for(int i=n-1;i>0;i--){
            if(nums[i] <= nums[i-1])k--;
            else{
                break;
            }
        }
        // if k = -1
        if(k==-1){
            reverse(nums,0,n-1);
            return ;
        }

        for(int i=n-1;i>0;i--){
            if(nums[i]>nums[k]){
                int temp = nums[i];
                nums[i] =  nums[k];
                nums[k] = temp;
                break;
            }
        }
            reverse(nums,k+1,n-1);
    }
    void reverse(int [] arr,int start,int end){
        while (start<end){
            int temp = arr[start];
            arr[start] = arr[end];
            arr[end] = temp;
            start++;
            end--;
        }
    }
}
